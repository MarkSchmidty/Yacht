{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Yacht Intro A web interface for managing docker containers with an emphasis on templating to provide one-click deployments of dockerized applications. Think of it like a decentralized app store for servers that anyone can make packages for. Features Container templating compatibility (Portainer compatible) Basic container management Easy template updating Template Variables to allow for a one-click experience Guided container deployment Dashboard for monitoring all of your docker containers in one place Features (Coming Soon!) Advanced container managment (edit/modify, networks, volumes) Docker-compose compatibility User Managment One click updating of containers. If you want something that's not planned please open a feature request issue and we'll see about getting it added. Templates Currently Yacht is compatible with portainer templates. You'll add a template url in the \"Add Template\" settings. The the template will be read, separated into apps, and imported into the database. The apps associated with the templates are linked via a db relationship so when the template is removed, so are the apps associated with it. We store the template url as well so we can enable updating templates with a button press. We recommend starting with: https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/yacht/Template/template.json In templates you are able to define variables (starting with ! ) to have them automatically replaced by whatever variable the user has set in their server settings (ie. !config will be replaced by /yacht/AppData/Config by default).","title":"Home"},{"location":"#welcome-to-yacht","text":"","title":"Welcome to Yacht"},{"location":"#intro","text":"A web interface for managing docker containers with an emphasis on templating to provide one-click deployments of dockerized applications. Think of it like a decentralized app store for servers that anyone can make packages for.","title":"Intro"},{"location":"#features","text":"Container templating compatibility (Portainer compatible) Basic container management Easy template updating Template Variables to allow for a one-click experience Guided container deployment Dashboard for monitoring all of your docker containers in one place","title":"Features"},{"location":"#features-coming-soon","text":"Advanced container managment (edit/modify, networks, volumes) Docker-compose compatibility User Managment One click updating of containers. If you want something that's not planned please open a feature request issue and we'll see about getting it added.","title":"Features (Coming Soon!)"},{"location":"#templates","text":"Currently Yacht is compatible with portainer templates. You'll add a template url in the \"Add Template\" settings. The the template will be read, separated into apps, and imported into the database. The apps associated with the templates are linked via a db relationship so when the template is removed, so are the apps associated with it. We store the template url as well so we can enable updating templates with a button press. We recommend starting with: https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/yacht/Template/template.json In templates you are able to define variables (starting with ! ) to have them automatically replaced by whatever variable the user has set in their server settings (ie. !config will be replaced by /yacht/AppData/Config by default).","title":"Templates"},{"location":"Advanced/proxy/","text":"Reverse Proxy Reverse Proxy Setup To put Yacht behind a reverse proxy you'll need to enable websockets support as Logs, Stats, and the Dashboard use websockets. In Nginx Proxy Manager this is done by enabling \"Websockets Support\" for a standard nginx setup you'll need to add the following to your Yacht location block: Proxy Websockets proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"Upgrade\";","title":"Reverse Proxy"},{"location":"Advanced/proxy/#reverse-proxy","text":"","title":"Reverse Proxy"},{"location":"Advanced/proxy/#reverse-proxy-setup","text":"To put Yacht behind a reverse proxy you'll need to enable websockets support as Logs, Stats, and the Dashboard use websockets. In Nginx Proxy Manager this is done by enabling \"Websockets Support\" for a standard nginx setup you'll need to add the following to your Yacht location block: Proxy Websockets proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"Upgrade\";","title":"Reverse Proxy Setup"},{"location":"Developer_Information/DeveloperSetup/","text":"Setting up This assumes you're using vscode and will want to use the debugging tools for the backend. If you're not using vscode then skip the launch.json section. Project Layout Clone the repo: Code git clone https://github.com/SelfhostedPro/Yacht.git Create the config directory for the sqlite db: Code cd Yacht mkdir config Requirements Install the backend requirements Code cd backend python -m venv venv source venv/bin/activate pip install -r requirements.txt Install the frontend requirements Code cd ../frontend npm install Setup a launch.json (optional) in the root directory create a .vscode folder and paste the following launch.json: Code cd .. mkdir .vscode nano launch.json Installation Script { \"configurations\" : [ { \"name\" : \"Python: Module\" , \"type\" : \"python\" , \"request\" : \"launch\" , \"module\" : \"uvicorn\" , \"args\" : [ \"backend.api.main:app\" , \"--reload\" ] } ] } Run everything Start the backend using the run button in the debugging tab in vscode or manually run it. Then for the frontend run the following from inside the frontend folder: Code npm run serve Script: Here is an untested script that basically combines everything except for the launch.json stuff: Code #!/bin/bash git clone https://github.com/SelfhostedPro/Yacht.git cd Yacht mkdir config cd backend python -m venv venv source venv/bin/activate pip install -r requirements.txt cd ../frontend npm install Then just use the \"Run Everything section above","title":"Developer Setup"},{"location":"Developer_Information/DeveloperSetup/#setting-up","text":"This assumes you're using vscode and will want to use the debugging tools for the backend. If you're not using vscode then skip the launch.json section.","title":"Setting up"},{"location":"Developer_Information/DeveloperSetup/#project-layout","text":"Clone the repo: Code git clone https://github.com/SelfhostedPro/Yacht.git Create the config directory for the sqlite db: Code cd Yacht mkdir config","title":"Project Layout"},{"location":"Developer_Information/DeveloperSetup/#requirements","text":"","title":"Requirements"},{"location":"Developer_Information/DeveloperSetup/#install-the-backend-requirements","text":"Code cd backend python -m venv venv source venv/bin/activate pip install -r requirements.txt","title":"Install the backend requirements"},{"location":"Developer_Information/DeveloperSetup/#install-the-frontend-requirements","text":"Code cd ../frontend npm install","title":"Install the frontend requirements"},{"location":"Developer_Information/DeveloperSetup/#setup-a-launchjson-optional","text":"in the root directory create a .vscode folder and paste the following launch.json: Code cd .. mkdir .vscode nano launch.json Installation Script { \"configurations\" : [ { \"name\" : \"Python: Module\" , \"type\" : \"python\" , \"request\" : \"launch\" , \"module\" : \"uvicorn\" , \"args\" : [ \"backend.api.main:app\" , \"--reload\" ] } ] }","title":"Setup a launch.json (optional)"},{"location":"Developer_Information/DeveloperSetup/#run-everything","text":"Start the backend using the run button in the debugging tab in vscode or manually run it. Then for the frontend run the following from inside the frontend folder: Code npm run serve","title":"Run everything"},{"location":"Developer_Information/DeveloperSetup/#script","text":"Here is an untested script that basically combines everything except for the launch.json stuff: Code #!/bin/bash git clone https://github.com/SelfhostedPro/Yacht.git cd Yacht mkdir config cd backend python -m venv venv source venv/bin/activate pip install -r requirements.txt cd ../frontend npm install Then just use the \"Run Everything section above","title":"Script:"},{"location":"Installation/arm/","text":"ARM Memory support in graphs If you're on arm and graphs aren't showing up add the following to your cmdline.txt: Arm RAM Fix cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1","title":"ARM"},{"location":"Installation/arm/#arm","text":"","title":"ARM"},{"location":"Installation/arm/#memory-support-in-graphs","text":"If you're on arm and graphs aren't showing up add the following to your cmdline.txt: Arm RAM Fix cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1","title":"Memory support in graphs"},{"location":"Installation/gettingstarted/","text":"Beginners Guide This guide will take you through setting up Yacht, adding your first template, and deploying your first app. Setting Up Yacht Running Yacht is as simple as running the following two commands: Installation Script docker volume create yacht docker run -d -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -v yacht:/config selfhostedpro/yacht After that you can access Yacht on port 8000 on your server in a web browser. If you're using Yacht alongside portainer you'll want to change the 8000 on the left of the : to 8001, then it will be available on that port on your host. Once you're at the login page you can login with the username admin@yacht.local and the password pass . Template Variables We'll setup template variables so that if you're using a template built for Yacht, you'll be able to have all of your files mounted in the correct places. Click on the Settings cog in the left sidebar and then click on Template Variables along the top. Replace the paths on the right with where you want each variable to be mounted. (This will typically be in your file shares if you're using a NAS). Add any additional Variables you would like and when you're done, hit save at the bottom. Adding a Template To add a template, click on the Folder icon in the left sidebar and then on \"New Template\". If you don't have a template added yet it'll recommend you add the one that I maintain for Yacht. Once you've entered a name and URL you'll click submit. Now that you're on the \"View Templates\" page you can click on the template you added to see all the apps included with your template. From the \"View Templates\" page you can also click on the 3 dots and from there you can update if there are any changes, view the template, or delete the template. Deploying from a Template Now that you have a template added let's deploy an application. Click on your template to view it. Then pick an app to deploy. You can click on view to see any details about the application. One you've got an app in mind click on deploy and you'll be taken to the deploy form. Everything should be filled out for you but double check that everything looks correct. Click on continue until you get to the last page and then click on Deploy. Now you'll see your running app. You can click on it to view more detailed stats or click on the Arrow to the right of the name to perform an action with it.","title":"Getting Started"},{"location":"Installation/gettingstarted/#beginners-guide","text":"This guide will take you through setting up Yacht, adding your first template, and deploying your first app.","title":"Beginners Guide"},{"location":"Installation/gettingstarted/#setting-up-yacht","text":"Running Yacht is as simple as running the following two commands: Installation Script docker volume create yacht docker run -d -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -v yacht:/config selfhostedpro/yacht After that you can access Yacht on port 8000 on your server in a web browser. If you're using Yacht alongside portainer you'll want to change the 8000 on the left of the : to 8001, then it will be available on that port on your host. Once you're at the login page you can login with the username admin@yacht.local and the password pass .","title":"Setting Up Yacht"},{"location":"Installation/gettingstarted/#template-variables","text":"We'll setup template variables so that if you're using a template built for Yacht, you'll be able to have all of your files mounted in the correct places. Click on the Settings cog in the left sidebar and then click on Template Variables along the top. Replace the paths on the right with where you want each variable to be mounted. (This will typically be in your file shares if you're using a NAS). Add any additional Variables you would like and when you're done, hit save at the bottom.","title":"Template Variables"},{"location":"Installation/gettingstarted/#adding-a-template","text":"To add a template, click on the Folder icon in the left sidebar and then on \"New Template\". If you don't have a template added yet it'll recommend you add the one that I maintain for Yacht. Once you've entered a name and URL you'll click submit. Now that you're on the \"View Templates\" page you can click on the template you added to see all the apps included with your template. From the \"View Templates\" page you can also click on the 3 dots and from there you can update if there are any changes, view the template, or delete the template.","title":"Adding a Template"},{"location":"Installation/gettingstarted/#deploying-from-a-template","text":"Now that you have a template added let's deploy an application. Click on your template to view it. Then pick an app to deploy. You can click on view to see any details about the application. One you've got an app in mind click on deploy and you'll be taken to the deploy form. Everything should be filled out for you but double check that everything looks correct. Click on continue until you get to the last page and then click on Deploy. Now you'll see your running app. You can click on it to view more detailed stats or click on the Arrow to the right of the name to perform an action with it.","title":"Deploying from a Template"},{"location":"Installation/macos/","text":"MacOS Permissions Issues MacOS will throw errors about being unable to access the docker socket ( /var/run/docker.sock ) in order to resolve this problem you'll need to run with PUID=0 and PGID=0 environment variables set. Here's an example docker-compose: MacOS docker-compose version: '3' services: yacht: container_name: yacht restart: unless-stopped ports: - 8000:8000 volumes: - yacht:/config - /var/run/docker.sock:/var/run/docker.sock - /Users/<username>/Development/Docker/compose:/compose environment: - PUID=0 - PGID=0 - COMPOSE_DIR=/compose image: selfhostedpro/yacht:devel volumes: yacht: Please note that the above docker-compose sets up a compose directory for managing compose projects. You'll need to change the paths to fit your system or remove these if you're not going to be using docker-compose","title":"MacOS"},{"location":"Installation/macos/#macos","text":"","title":"MacOS"},{"location":"Installation/macos/#permissions-issues","text":"MacOS will throw errors about being unable to access the docker socket ( /var/run/docker.sock ) in order to resolve this problem you'll need to run with PUID=0 and PGID=0 environment variables set. Here's an example docker-compose: MacOS docker-compose version: '3' services: yacht: container_name: yacht restart: unless-stopped ports: - 8000:8000 volumes: - yacht:/config - /var/run/docker.sock:/var/run/docker.sock - /Users/<username>/Development/Docker/compose:/compose environment: - PUID=0 - PGID=0 - COMPOSE_DIR=/compose image: selfhostedpro/yacht:devel volumes: yacht: Please note that the above docker-compose sets up a compose directory for managing compose projects. You'll need to change the paths to fit your system or remove these if you're not going to be using docker-compose","title":"Permissions Issues"},{"location":"Installation/requirements/","text":"Requirements Supported Architectures Yacht is built for the following architectures: linux/amd64 linux/arm/v7 linux/arm64 It may work on others such as Windows or MacOS but they will not be officially supported. Software Requirements The latest version of docker is recommended. Instructions for how to install it are available here .","title":"Requirements"},{"location":"Installation/requirements/#requirements","text":"","title":"Requirements"},{"location":"Installation/requirements/#supported-architectures","text":"Yacht is built for the following architectures: linux/amd64 linux/arm/v7 linux/arm64 It may work on others such as Windows or MacOS but they will not be officially supported.","title":"Supported Architectures"},{"location":"Installation/requirements/#software-requirements","text":"The latest version of docker is recommended. Instructions for how to install it are available here .","title":"Software Requirements"},{"location":"Installation/yacht/","text":"Install Yacht via Docker Installing Yacht via docker is as simple as running two commands: Installation Linux docker volume create yacht docker run -d -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -v yacht:/config selfhostedpro/yacht This will start Yacht on port 8000 (change this to 8001 if you're also using portainer). The default login is admin@yacht.local and pass you should change this immediately by clicking on admin in the top right and then \"User\" then select \"Change Password\" in the top menu. You can also change your username using this field. If you need to reset your password/username to the included defaults, please delete your yacht volume and create a new one (you will lose all of your configurations so be sure to backup when you make changes). via OpenMediaVault Installing Yacht via OpenMediaVault can be done through OMV-Extras . Installation instructions for OMV-Extras can be found here Once OMV-Extras is installed you'll need to do the following steps: In OMV go to OMV-Extras -> Docker Click on \"Docker\" and then \"Install\" (Optional) Click on advanced under \"Yacht (Alpha)\" and select the port you want to use. Once docker is installed click on \"Yacht\" and then \"Install\" Once it's installed you can use the button to open Yacht. Installation docker-compose 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 --- version : '3' services : yacht : container_name : yacht restart : unless-stopped ports : - 8000:8000 volumes : - yacht:/config - /var/run/docker.sock:/var/run/docker.sock image : selfhostedpro/yacht volumes : yacht : via DockSTARTer Yacht is available via DockSTARTer. More information on installing Yacht via DockSTARTer is available here .","title":"Install Yacht"},{"location":"Installation/yacht/#install-yacht","text":"","title":"Install Yacht"},{"location":"Installation/yacht/#via-docker","text":"Installing Yacht via docker is as simple as running two commands: Installation Linux docker volume create yacht docker run -d -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -v yacht:/config selfhostedpro/yacht This will start Yacht on port 8000 (change this to 8001 if you're also using portainer). The default login is admin@yacht.local and pass you should change this immediately by clicking on admin in the top right and then \"User\" then select \"Change Password\" in the top menu. You can also change your username using this field. If you need to reset your password/username to the included defaults, please delete your yacht volume and create a new one (you will lose all of your configurations so be sure to backup when you make changes).","title":"via Docker"},{"location":"Installation/yacht/#via-openmediavault","text":"Installing Yacht via OpenMediaVault can be done through OMV-Extras . Installation instructions for OMV-Extras can be found here Once OMV-Extras is installed you'll need to do the following steps: In OMV go to OMV-Extras -> Docker Click on \"Docker\" and then \"Install\" (Optional) Click on advanced under \"Yacht (Alpha)\" and select the port you want to use. Once docker is installed click on \"Yacht\" and then \"Install\" Once it's installed you can use the button to open Yacht. Installation docker-compose 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 --- version : '3' services : yacht : container_name : yacht restart : unless-stopped ports : - 8000:8000 volumes : - yacht:/config - /var/run/docker.sock:/var/run/docker.sock image : selfhostedpro/yacht volumes : yacht :","title":"via OpenMediaVault"},{"location":"Installation/yacht/#via-dockstarter","text":"Yacht is available via DockSTARTer. More information on installing Yacht via DockSTARTer is available here .","title":"via DockSTARTer"},{"location":"Pages/applications/","text":"Applications View Applications In the main view of the applications page you can see the following: Running Apps: App Name App Status App Image Ports/Port Labels Created time App Actions (down chevron to the left): Start Stop Restart Update (one click utilizing watchtower on the backend) Kill Remove Apps are sortable by the columns at the top or searchable via the searchbar at the top. Click on an app to view more details. Ports will be labeled if they were set when deployed. Updates To check for updates click on the chevron next to \"Apps\" at the top of the page and then \"Check for updates\". This will querry dockerhub and check the latest manifest for your tag against the currently running one. Once the check is complete there will be a green dot next to applications with updates available. You can go into App Actions to update the app. Application Info Info In this view you can see configuration settings for your container. Processes This page shows the processes currently running on your container. Logs The logs page will stream logs from the container to your browser so you don't need to refresh the page. Stats This page shows a live view of the CPU and Memory usage for your container with 5 minutes worth of historical data (starting when you load the page). New Application This is the page where you can deploy containers. In the top right there's a button to load an app from a template. The page walks you through all of the different information required to deploy a container.","title":"Applications"},{"location":"Pages/applications/#applications","text":"","title":"Applications"},{"location":"Pages/applications/#view-applications","text":"In the main view of the applications page you can see the following: Running Apps: App Name App Status App Image Ports/Port Labels Created time App Actions (down chevron to the left): Start Stop Restart Update (one click utilizing watchtower on the backend) Kill Remove Apps are sortable by the columns at the top or searchable via the searchbar at the top. Click on an app to view more details. Ports will be labeled if they were set when deployed.","title":"View Applications"},{"location":"Pages/applications/#updates","text":"To check for updates click on the chevron next to \"Apps\" at the top of the page and then \"Check for updates\". This will querry dockerhub and check the latest manifest for your tag against the currently running one. Once the check is complete there will be a green dot next to applications with updates available. You can go into App Actions to update the app.","title":"Updates"},{"location":"Pages/applications/#application-info","text":"","title":"Application Info"},{"location":"Pages/applications/#info","text":"In this view you can see configuration settings for your container.","title":"Info"},{"location":"Pages/applications/#processes","text":"This page shows the processes currently running on your container.","title":"Processes"},{"location":"Pages/applications/#logs","text":"The logs page will stream logs from the container to your browser so you don't need to refresh the page.","title":"Logs"},{"location":"Pages/applications/#stats","text":"This page shows a live view of the CPU and Memory usage for your container with 5 minutes worth of historical data (starting when you load the page).","title":"Stats"},{"location":"Pages/applications/#new-application","text":"This is the page where you can deploy containers. In the top right there's a button to load an app from a template. The page walks you through all of the different information required to deploy a container.","title":"New Application"},{"location":"Pages/dashboard/","text":"Dashboard The dashboard shows a live view of Memory and CPU consumption for your running applications. They are displayed in alphabetical order and don't keep historical data. Clicking on the name of an application will take you to the Application Details page for it.","title":"Dashboard"},{"location":"Pages/dashboard/#dashboard","text":"The dashboard shows a live view of Memory and CPU consumption for your running applications. They are displayed in alphabetical order and don't keep historical data. Clicking on the name of an application will take you to the Application Details page for it.","title":"Dashboard"},{"location":"Pages/images/","text":"Images Here you can manage your images. Currently you can only add images by their repo info (the same way you would do a docker pull ), remove, update (pull), or view details on your images. This page will also tell you which images are currently not in use.","title":"Images"},{"location":"Pages/images/#images","text":"Here you can manage your images. Currently you can only add images by their repo info (the same way you would do a docker pull ), remove, update (pull), or view details on your images. This page will also tell you which images are currently not in use.","title":"Images"},{"location":"Pages/networks/","text":"Networks Here you can manage your networks. You can add a new network by clicking on the plus and filling out your form. You can also view which networks are being used, view details on networks (including which containers are using them), and delete any networks you would like.","title":"Networks"},{"location":"Pages/networks/#networks","text":"Here you can manage your networks. You can add a new network by clicking on the plus and filling out your form. You can also view which networks are being used, view details on networks (including which containers are using them), and delete any networks you would like.","title":"Networks"},{"location":"Pages/serverSettings/","text":"Server Settings Server Info In the server info section you can import and export the configuration of your server. This is limited to templates and template variables. Template Variables Read more about this section here . Prune Here you can clear out unused images, networks, volumes, and stopped containers. Update Here you can update your server. This will launch watchtower with the --run-once command targeting the name of your Yacht instance and then remove itself once Yacht has been upgraded. This will restart Yacht so don't worry if it becomes unavailable for a short period. Please always backup your configuration in case you run into an issue","title":"Server Settings"},{"location":"Pages/serverSettings/#server-settings","text":"","title":"Server Settings"},{"location":"Pages/serverSettings/#server-info","text":"In the server info section you can import and export the configuration of your server. This is limited to templates and template variables.","title":"Server Info"},{"location":"Pages/serverSettings/#template-variables","text":"Read more about this section here .","title":"Template Variables"},{"location":"Pages/serverSettings/#prune","text":"Here you can clear out unused images, networks, volumes, and stopped containers.","title":"Prune"},{"location":"Pages/serverSettings/#update","text":"Here you can update your server. This will launch watchtower with the --run-once command targeting the name of your Yacht instance and then remove itself once Yacht has been upgraded. This will restart Yacht so don't worry if it becomes unavailable for a short period. Please always backup your configuration in case you run into an issue","title":"Update"},{"location":"Pages/templates/","text":"Templates In the Yacht Templates page you will see any templates that you've added to Yacht. If you click on the 3 dots to the right you can View, Update, or Delete the template. Information on creating a template can be found here","title":"Templates"},{"location":"Pages/templates/#templates","text":"In the Yacht Templates page you will see any templates that you've added to Yacht. If you click on the 3 dots to the right you can View, Update, or Delete the template. Information on creating a template can be found here","title":"Templates"},{"location":"Pages/userSettings/","text":"User Settings In the user settings page you can change the email and password for your user account.","title":"User Settings"},{"location":"Pages/userSettings/#user-settings","text":"In the user settings page you can change the email and password for your user account.","title":"User Settings"},{"location":"Pages/volumes/","text":"Volumes Here you can manage your volumes. Currently you can only add a simple volume by name (no CIFS/NFS support yet), remove, or view details on your images. This page will also tell you which volumes are currently not in use.","title":"Volumes"},{"location":"Pages/volumes/#volumes","text":"Here you can manage your volumes. Currently you can only add a simple volume by name (no CIFS/NFS support yet), remove, or view details on your images. This page will also tell you which volumes are currently not in use.","title":"Volumes"},{"location":"Projects/advanced/","text":"Advanced project usage For larger projects you're likely going to want to clone an entire git repository into your project folder and pass through a veriety of files. As an example you can look at docker-elk . The way to go about deploying something like this would be to mount your yacht config to your host machine for easy editing/peristance. For this example I'm going to use /opt/yacht/ . I would go into /opt/yacht/compose (if the compose directory doesn't exist you'll need to create it), clone the repository ( git clone https://github.com/deviantony/docker-elk.git ) and then when you go to your projects page you'll see the new project available (you may need to refresh the page to see it). From here you can make changes to the files on your host or edit the docker-compose.yml as needed in the project editor and then deploy the project.","title":"Advanced Projects"},{"location":"Projects/advanced/#advanced-project-usage","text":"For larger projects you're likely going to want to clone an entire git repository into your project folder and pass through a veriety of files. As an example you can look at docker-elk . The way to go about deploying something like this would be to mount your yacht config to your host machine for easy editing/peristance. For this example I'm going to use /opt/yacht/ . I would go into /opt/yacht/compose (if the compose directory doesn't exist you'll need to create it), clone the repository ( git clone https://github.com/deviantony/docker-elk.git ) and then when you go to your projects page you'll see the new project available (you may need to refresh the page to see it). From here you can make changes to the files on your host or edit the docker-compose.yml as needed in the project editor and then deploy the project.","title":"Advanced project usage"},{"location":"Projects/explained/","text":"Projects Explained Docker-compose projects are a container orchestration tool to help manage containers that need to talk to each other. Yacht provides an in browser docker-compose editor as well as a way to manage them easily via the projects tab in the yacht UI. The easiest way to get started is to find a project that you want to launch, then click on the + button in the projects tab to create a new project. This will create a new folder with your project name and write whatever you've put into the editor into the docker-compose.yml inside of that folder. By default, these are mapped in the container to /config/compose . You'll want to have a separate folder inside of /config/compose with the project name as the name of the folder (if you create your project via yacht this is taken care of for you). Yacht uses docker-compose via the sh submodule for python so it supports the latest versions that are available and you wont need to worry about mismatches. Docker Compose Folder Structure: The following is an example folder structure: Folder Structure compose \u251c\u2500\u2500 docker-pulls ### Project Folder### \u2502 \u251c\u2500\u2500 Docker_Hub_Stats.json \u2502 \u251c\u2500\u2500 README.md \u2502 \u251c\u2500\u2500 config.monitoring \u2502 \u251c\u2500\u2500 docker-compose.yml ### docker-compose.yml ### \u2502 \u251c\u2500\u2500 prometheus \u2502 \u2502 \u251c\u2500\u2500 alert.rules \u2502 \u2502 \u2514\u2500\u2500 prometheus.yml \u2502 \u2514\u2500\u2500 prometheus.yml \u251c\u2500\u2500 opendistro ### Project Folder \u2514\u2500\u2500 docker-compose.yml ### docker-compose.yml ### The way this works is the Project will be named the same as the project folder. Inside of the project folder you can put the docker-compose.yml file as well as any other files you need to pass through. These will be seen by Yacht and you'll be able to control the projects, as well as the services within them. When you view a project, the docker-compose file is parsed and you'll see all of the details of the project.","title":"Projects Explained"},{"location":"Projects/explained/#projects-explained","text":"Docker-compose projects are a container orchestration tool to help manage containers that need to talk to each other. Yacht provides an in browser docker-compose editor as well as a way to manage them easily via the projects tab in the yacht UI. The easiest way to get started is to find a project that you want to launch, then click on the + button in the projects tab to create a new project. This will create a new folder with your project name and write whatever you've put into the editor into the docker-compose.yml inside of that folder. By default, these are mapped in the container to /config/compose . You'll want to have a separate folder inside of /config/compose with the project name as the name of the folder (if you create your project via yacht this is taken care of for you). Yacht uses docker-compose via the sh submodule for python so it supports the latest versions that are available and you wont need to worry about mismatches.","title":"Projects Explained"},{"location":"Projects/explained/#docker-compose-folder-structure","text":"The following is an example folder structure: Folder Structure compose \u251c\u2500\u2500 docker-pulls ### Project Folder### \u2502 \u251c\u2500\u2500 Docker_Hub_Stats.json \u2502 \u251c\u2500\u2500 README.md \u2502 \u251c\u2500\u2500 config.monitoring \u2502 \u251c\u2500\u2500 docker-compose.yml ### docker-compose.yml ### \u2502 \u251c\u2500\u2500 prometheus \u2502 \u2502 \u251c\u2500\u2500 alert.rules \u2502 \u2502 \u2514\u2500\u2500 prometheus.yml \u2502 \u2514\u2500\u2500 prometheus.yml \u251c\u2500\u2500 opendistro ### Project Folder \u2514\u2500\u2500 docker-compose.yml ### docker-compose.yml ### The way this works is the Project will be named the same as the project folder. Inside of the project folder you can put the docker-compose.yml file as well as any other files you need to pass through. These will be seen by Yacht and you'll be able to control the projects, as well as the services within them. When you view a project, the docker-compose file is parsed and you'll see all of the details of the project.","title":"Docker Compose Folder Structure:"},{"location":"Templates/templates/","text":"Templates Explained This page will go over building a template. The templates are all compatible with portainer v1 templates so you can always check that documentation too. All of the keys (type, name, title, etc.) are optional and will simply be blank if left empty. Single app templates will be surrounded by {} as is standard for .json files. Multi app templates with consist of multiple {} sections (separated with a , after the } (ie. }, ) surrounded in [] . More info on writing JSON is available here If you don't like writing in JSON another option is to use YAML. It's automatically converted into JSON in the backend so all of the options are the same. Example JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 { \"type\" : 1 , \"title\" : \"App Title\" , \"name\" : \"container-name\" , \"description\" : \"This is a description.\" , \"logo\" : \"https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png\" , \"image\" : \"dev/application:latest\" , \"note\" : \"This is a note\" , \"categories\" : [ \"Other\" , \"Tools\" ], \"platform\" : \"linux\" , \"restart_policy\" : \"unless-stopped\" , \"ports\" : [ \"9091:9091/tcp\" , \"9090:9090/tcp\" ], \"network_mode\" : \"bridge\" , \"volumes\" : [ { \"container\" : \"/data\" , \"bind\" : \"!downloads\" }, { \"container\" : \"/etc/localtime\" , \"bind\" : \"!localtime\" } ], \"sysctls\" : [ { \"net.ipv6.conf.all.disable_ipv6\" : \"0\" } ], \"cap_add\" : [ \"NET_ADMIN\" ], \"env\" : [ { \"name\" : \"PUID\" , \"label\" : \"PUID\" , \"default\" : \"1000\" }, { \"name\" : \"PGID\" , \"label\" : \"PGID\" , \"default\" : \"1000\" }, { \"name\" : \"EnvWithDescription\" , \"label\" : \"EnvWithDescription\" , \"description\" : \"This is a description\" , \"default\" : \"default\" } ] } YAML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 --- type : 1 title : App Title name : container-name description : This is a description. logo : https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png image : dev/application:latest note : This is a note categories : - Other - Tools platform : linux restart_policy : unless-stopped ports : - 9091:9091/tcp - 9090:9090/tcp network_mode : bridge volumes : - container : \"/data\" bind : \"!downloads\" - container : \"/etc/localtime\" bind : \"!localtime\" sysctls : - net.ipv6.conf.all.disable_ipv6 : '0' cap_add : - NET_ADMIN env : - name : PUID label : PUID default : '1000' - name : PGID label : PGID default : '1000' - name : EnvWithDescription label : EnvWithDescription description : This is a description default : default This is what each section does: * = required type* Code Example JSON { \"type\" : 1 , } YAML type : 1 This currently isn't in use. It's just here to keep compatibility with portainer but is ignored. title* Example JSON { \"title\" : \"App Title\" , } YAML title : App Title This is what is displayed when in the apps list page. Punctuation is nice here and adds to the polish name Example JSON { \"name\" : \"app_name\" , } YAML name : app_name This is what the actual container is named. Information on this is here . description Example JSON { \"description\" : \"This is a description.\" , } YAML description : This is a description. This is the description that is shown in the app list. \\n is interpreted as a newline character logo Example JSON { \"logo\" : \"https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/ Images/transmission-icon.png\" , } YAML logo : https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/ transmission-icon.png This is the logo that is show in the app list. image* Example JSON { \"image\" : \"haugene/transmission-openvpn:latest\" , } YAML image : haugene/transmission-openvpn:latest This is the image that's pulled from dockerhub. The tag ( :latest ) is optional. note Example JSON { \"note\" : \"List of supported providers available <a href='https://haugene.github.io/ docker-transmission-openvpn/supported-providers'/>here</a>.\" , } YAML note : List of supported providers available <a href='https://haugene.github.io/ docker-transmission-openvpn/supported-providers'/>here</a>., This is shown when someone clicks on \"VIEW\" in the app list. It will render HTML appropriately. categories Example JSON { \"categories\" : [ \"Other\" , \"VPN\" , \"Tools\" ], } YAML categories : - Other - VPN - Tools Single Line JSON { \"categories\" : [ \"Other\" , \"VPN\" , \"Tools\" ], } A list of categories associated with the application. This is optional but sorting/filtering by category will eventually be a feature. platform* Example JSON { \"platform\" : \"linux\" , } YAML platform : linux, The platform the image will run on. Haven't tested anything but linux. restart_policy Example JSON { \"restart_policy\" : \"unless-stopped\" , } YAML restart_policy : unless-stopped Define your restart policy. Info here . ports Example JSON { \"ports\" : [ \"9091:9091/tcp\" , \"9090:9090/tcp\" , \"9092/tcp\" ], } YAML ports : - 9091:9091/tcp - 9090:9090/tcp - 9092/tcp Single Line JSON { \"ports\" : [ \"9091:9091/tcp\" , \"9090:9090/tcp\" , \"9092/tcp\" ] } Ports to be passed through. The host port is on the left of the : and the container port is on the right. Protocol is after the / . If no host port is specified a random one is used. I frequently leave out the host port on applications that use common ports. Port Labels Example JSON { \"ports\" : [ { \"WebUI\" : \"8096:8096/tcp\" , \"HTTPS WebUI\" : \"8920:8920/tcp\" , \"DNLA\" : \"1900:1900/udp\" , \"Discovery\" : \"7359:7359/udp\" } ], } YAML ports : - WebUI : 8096:8096/tcp - HTTPS WebUI : 8920:8920/tcp - DNLA : 1900:1900/udp - Discovery : 7359:7359/udp Single Line JSON { \"ports\" : [{ \"WebUI\" : \"8096:8096/tcp\" , \"HTTPS WebUI\" : \"8920:8920/tcp\" , \"DNLA\" : \"1900:1900/udp\" , \"Discovery\" : \"7359:7359/udp\" }] } You can label ports for the services that are on them if you would like. This will auto-fill the label field in the deploy form and give users a better understanding of the applications they're running. network_mode Example JSON { \"network_mode\" : \"host\" } YAML network_mode : host You can set a certain network mode if you're using a legacy application that requires it. any ports mapped will not be passed through if you choose host as your networking mode and you cannot change the ports volumes Example JSON { \"volumes\" : [ { \"container\" : \"/data\" , \"bind\" : \"!downloads\" }, { \"container\" : \"/etc/localtime\" , \"bind\" : \"/etc/localtime\" }, \"container\" : \"/config\" , \"bind\" : \"app_config\" ], } YAML volumes : - container : \"/data\" bind : \"!downloads\" - container : \"/etc/localtime\" bind : \"/etc/localtime\" - container : \"/config\" bind : \"app_config\" Single Line JSON { \"volumes\" : [{ \"container\" : /da ta , \"bind\" : \"!downloads\" }, { \"container\" : \"/etc/localtime\" , \"bind\" : \"/etc/localtime\" }, { \"container\" : \"/config\" , \"bind\" : \"app_config\" }] } List of bind mounts. Container will mount inside of the container and bind will mount on the host. The bind section can utilize Template Variables in the users settings so if they're set they'll be replaced by what's there. You can use a named volume by using the name of the volume instead of a path (no / at the beginning). sysctls Example JSON { \"sysctls\" : [ { \"net.ipv6.conf.all.disable_ipv6\" : \"0\" } ], } YAML sysctls : - net.ipv6.conf.all.disable_ipv6 : '0' Single Line JSON { \"sysctls\" : [ { \"net.ipv6.conf.all.disable_ipv6\" : \"0\" } ] } Key value pair for sysctl options. More info available here cap_add Example JSON { \"cap_add\" : [ \"NET_ADMIN\" ], } YAML cap_add : - NET_ADMIN Single Line JSON { \"cap_add\" : [ \"NET_ADMIN\" ] } Value of capabilities you want to add to a container. More info available here . env Example JSON { \"env\" : [ { \"name\" : \"PUID\" , \"label\" : \"PUID\" , \"default\" : \"1000\" }, { \"name\" : \"PGID\" , \"label\" : \"PGID\" , \"default\" : \"1000\" }, { \"name\" : \"EnvWithDescription\" , \"label\" : \"EnvWithDescription\" , \"description\" : \"This is a description\" , \"default\" : \"default\" }, ] } YAML env : - name : PUID label : PUID default : 1000 - name : PGID label : PGID default : 100 - name : EnvWithDescription label : EnvWithDescription description : This is a description default : defaullt Single Line JSON { \"env\" : [{ \"name\" : \"PUID\" , \"label\" : \"PUID\" , \"default\" : \"1000\" },{ \"name\" : \"PGID\" , \"label\" : \"PGID\" , \"default\" : \"1000\" },{ \"name\" : \"EnvWithDescription\" , \"label\" : \"EnvWithDescription\" , \"description\" : \"This is a description\" , \"default\" : \"default\" }] } Env is used to set environment variables within the docker container. The description and default are both optional. Label currently isn't used but will be what is shown as the name of the field in the deploy form. labels Example JSON { \"labels\" : [ { \"label\" : \"local.yacht.label\" , \"value\" : \"this is a label\" }, { \"label\" : \"local.yacht.otherlabel\" , \"value\" : \"this is another label\" } ] } YAML labels : - label : local.yacht.label value : this is a label - label : local.yacht.otherlabel value : this is another label Single Line JSON { \"labels\" : [{ \"label\" : \"local.yacht.label\" , \"value\" : \"this is a label\" },{ \"label\" : \"local.ycht.otherlabel\" , \"value\" : \"this is another label\" }] } Labels can be used for automating services like traefik automatically as well as store information about containers (this is where port descriptions are stored on containers). These will show up in the advanced section like sysctls and capabilities. devices Example JSON { \"devices\" : [ { \"host\" : \"/dev/null\" , \"container\" : \"/dev/null\" } ] } YAML devices : - host : /dev/null container : /dev/null Single Line JSON { \"devices\" : [{ \"host\" : \"/dev/null\" , \"container\" : \"/dev/null\" }] } Devices allow devices to be passed through containers for things like transcoding.","title":"Templates Explained"},{"location":"Templates/templates/#templates-explained","text":"This page will go over building a template. The templates are all compatible with portainer v1 templates so you can always check that documentation too. All of the keys (type, name, title, etc.) are optional and will simply be blank if left empty. Single app templates will be surrounded by {} as is standard for .json files. Multi app templates with consist of multiple {} sections (separated with a , after the } (ie. }, ) surrounded in [] . More info on writing JSON is available here If you don't like writing in JSON another option is to use YAML. It's automatically converted into JSON in the backend so all of the options are the same. Example JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 { \"type\" : 1 , \"title\" : \"App Title\" , \"name\" : \"container-name\" , \"description\" : \"This is a description.\" , \"logo\" : \"https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png\" , \"image\" : \"dev/application:latest\" , \"note\" : \"This is a note\" , \"categories\" : [ \"Other\" , \"Tools\" ], \"platform\" : \"linux\" , \"restart_policy\" : \"unless-stopped\" , \"ports\" : [ \"9091:9091/tcp\" , \"9090:9090/tcp\" ], \"network_mode\" : \"bridge\" , \"volumes\" : [ { \"container\" : \"/data\" , \"bind\" : \"!downloads\" }, { \"container\" : \"/etc/localtime\" , \"bind\" : \"!localtime\" } ], \"sysctls\" : [ { \"net.ipv6.conf.all.disable_ipv6\" : \"0\" } ], \"cap_add\" : [ \"NET_ADMIN\" ], \"env\" : [ { \"name\" : \"PUID\" , \"label\" : \"PUID\" , \"default\" : \"1000\" }, { \"name\" : \"PGID\" , \"label\" : \"PGID\" , \"default\" : \"1000\" }, { \"name\" : \"EnvWithDescription\" , \"label\" : \"EnvWithDescription\" , \"description\" : \"This is a description\" , \"default\" : \"default\" } ] } YAML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 --- type : 1 title : App Title name : container-name description : This is a description. logo : https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png image : dev/application:latest note : This is a note categories : - Other - Tools platform : linux restart_policy : unless-stopped ports : - 9091:9091/tcp - 9090:9090/tcp network_mode : bridge volumes : - container : \"/data\" bind : \"!downloads\" - container : \"/etc/localtime\" bind : \"!localtime\" sysctls : - net.ipv6.conf.all.disable_ipv6 : '0' cap_add : - NET_ADMIN env : - name : PUID label : PUID default : '1000' - name : PGID label : PGID default : '1000' - name : EnvWithDescription label : EnvWithDescription description : This is a description default : default","title":"Templates Explained"},{"location":"Templates/templates/#this-is-what-each-section-does","text":"* = required","title":"This is what each section does:"},{"location":"Templates/templates/#type","text":"Code Example JSON { \"type\" : 1 , } YAML type : 1 This currently isn't in use. It's just here to keep compatibility with portainer but is ignored.","title":"type*"},{"location":"Templates/templates/#title","text":"Example JSON { \"title\" : \"App Title\" , } YAML title : App Title This is what is displayed when in the apps list page. Punctuation is nice here and adds to the polish","title":"title*"},{"location":"Templates/templates/#name","text":"Example JSON { \"name\" : \"app_name\" , } YAML name : app_name This is what the actual container is named. Information on this is here .","title":"name"},{"location":"Templates/templates/#description","text":"Example JSON { \"description\" : \"This is a description.\" , } YAML description : This is a description. This is the description that is shown in the app list. \\n is interpreted as a newline character","title":"description"},{"location":"Templates/templates/#logo","text":"Example JSON { \"logo\" : \"https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/ Images/transmission-icon.png\" , } YAML logo : https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/ transmission-icon.png This is the logo that is show in the app list.","title":"logo"},{"location":"Templates/templates/#image","text":"Example JSON { \"image\" : \"haugene/transmission-openvpn:latest\" , } YAML image : haugene/transmission-openvpn:latest This is the image that's pulled from dockerhub. The tag ( :latest ) is optional.","title":"image*"},{"location":"Templates/templates/#note","text":"Example JSON { \"note\" : \"List of supported providers available <a href='https://haugene.github.io/ docker-transmission-openvpn/supported-providers'/>here</a>.\" , } YAML note : List of supported providers available <a href='https://haugene.github.io/ docker-transmission-openvpn/supported-providers'/>here</a>., This is shown when someone clicks on \"VIEW\" in the app list. It will render HTML appropriately.","title":"note"},{"location":"Templates/templates/#categories","text":"Example JSON { \"categories\" : [ \"Other\" , \"VPN\" , \"Tools\" ], } YAML categories : - Other - VPN - Tools Single Line JSON { \"categories\" : [ \"Other\" , \"VPN\" , \"Tools\" ], } A list of categories associated with the application. This is optional but sorting/filtering by category will eventually be a feature.","title":"categories"},{"location":"Templates/templates/#platform","text":"Example JSON { \"platform\" : \"linux\" , } YAML platform : linux, The platform the image will run on. Haven't tested anything but linux.","title":"platform*"},{"location":"Templates/templates/#restart_policy","text":"Example JSON { \"restart_policy\" : \"unless-stopped\" , } YAML restart_policy : unless-stopped Define your restart policy. Info here .","title":"restart_policy"},{"location":"Templates/templates/#ports","text":"Example JSON { \"ports\" : [ \"9091:9091/tcp\" , \"9090:9090/tcp\" , \"9092/tcp\" ], } YAML ports : - 9091:9091/tcp - 9090:9090/tcp - 9092/tcp Single Line JSON { \"ports\" : [ \"9091:9091/tcp\" , \"9090:9090/tcp\" , \"9092/tcp\" ] } Ports to be passed through. The host port is on the left of the : and the container port is on the right. Protocol is after the / . If no host port is specified a random one is used. I frequently leave out the host port on applications that use common ports.","title":"ports"},{"location":"Templates/templates/#port-labels","text":"Example JSON { \"ports\" : [ { \"WebUI\" : \"8096:8096/tcp\" , \"HTTPS WebUI\" : \"8920:8920/tcp\" , \"DNLA\" : \"1900:1900/udp\" , \"Discovery\" : \"7359:7359/udp\" } ], } YAML ports : - WebUI : 8096:8096/tcp - HTTPS WebUI : 8920:8920/tcp - DNLA : 1900:1900/udp - Discovery : 7359:7359/udp Single Line JSON { \"ports\" : [{ \"WebUI\" : \"8096:8096/tcp\" , \"HTTPS WebUI\" : \"8920:8920/tcp\" , \"DNLA\" : \"1900:1900/udp\" , \"Discovery\" : \"7359:7359/udp\" }] } You can label ports for the services that are on them if you would like. This will auto-fill the label field in the deploy form and give users a better understanding of the applications they're running.","title":"Port Labels"},{"location":"Templates/templates/#network_mode","text":"Example JSON { \"network_mode\" : \"host\" } YAML network_mode : host You can set a certain network mode if you're using a legacy application that requires it. any ports mapped will not be passed through if you choose host as your networking mode and you cannot change the ports","title":"network_mode"},{"location":"Templates/templates/#volumes","text":"Example JSON { \"volumes\" : [ { \"container\" : \"/data\" , \"bind\" : \"!downloads\" }, { \"container\" : \"/etc/localtime\" , \"bind\" : \"/etc/localtime\" }, \"container\" : \"/config\" , \"bind\" : \"app_config\" ], } YAML volumes : - container : \"/data\" bind : \"!downloads\" - container : \"/etc/localtime\" bind : \"/etc/localtime\" - container : \"/config\" bind : \"app_config\" Single Line JSON { \"volumes\" : [{ \"container\" : /da ta , \"bind\" : \"!downloads\" }, { \"container\" : \"/etc/localtime\" , \"bind\" : \"/etc/localtime\" }, { \"container\" : \"/config\" , \"bind\" : \"app_config\" }] } List of bind mounts. Container will mount inside of the container and bind will mount on the host. The bind section can utilize Template Variables in the users settings so if they're set they'll be replaced by what's there. You can use a named volume by using the name of the volume instead of a path (no / at the beginning).","title":"volumes"},{"location":"Templates/templates/#sysctls","text":"Example JSON { \"sysctls\" : [ { \"net.ipv6.conf.all.disable_ipv6\" : \"0\" } ], } YAML sysctls : - net.ipv6.conf.all.disable_ipv6 : '0' Single Line JSON { \"sysctls\" : [ { \"net.ipv6.conf.all.disable_ipv6\" : \"0\" } ] } Key value pair for sysctl options. More info available here","title":"sysctls"},{"location":"Templates/templates/#cap_add","text":"Example JSON { \"cap_add\" : [ \"NET_ADMIN\" ], } YAML cap_add : - NET_ADMIN Single Line JSON { \"cap_add\" : [ \"NET_ADMIN\" ] } Value of capabilities you want to add to a container. More info available here .","title":"cap_add"},{"location":"Templates/templates/#env","text":"Example JSON { \"env\" : [ { \"name\" : \"PUID\" , \"label\" : \"PUID\" , \"default\" : \"1000\" }, { \"name\" : \"PGID\" , \"label\" : \"PGID\" , \"default\" : \"1000\" }, { \"name\" : \"EnvWithDescription\" , \"label\" : \"EnvWithDescription\" , \"description\" : \"This is a description\" , \"default\" : \"default\" }, ] } YAML env : - name : PUID label : PUID default : 1000 - name : PGID label : PGID default : 100 - name : EnvWithDescription label : EnvWithDescription description : This is a description default : defaullt Single Line JSON { \"env\" : [{ \"name\" : \"PUID\" , \"label\" : \"PUID\" , \"default\" : \"1000\" },{ \"name\" : \"PGID\" , \"label\" : \"PGID\" , \"default\" : \"1000\" },{ \"name\" : \"EnvWithDescription\" , \"label\" : \"EnvWithDescription\" , \"description\" : \"This is a description\" , \"default\" : \"default\" }] } Env is used to set environment variables within the docker container. The description and default are both optional. Label currently isn't used but will be what is shown as the name of the field in the deploy form.","title":"env"},{"location":"Templates/templates/#labels","text":"Example JSON { \"labels\" : [ { \"label\" : \"local.yacht.label\" , \"value\" : \"this is a label\" }, { \"label\" : \"local.yacht.otherlabel\" , \"value\" : \"this is another label\" } ] } YAML labels : - label : local.yacht.label value : this is a label - label : local.yacht.otherlabel value : this is another label Single Line JSON { \"labels\" : [{ \"label\" : \"local.yacht.label\" , \"value\" : \"this is a label\" },{ \"label\" : \"local.ycht.otherlabel\" , \"value\" : \"this is another label\" }] } Labels can be used for automating services like traefik automatically as well as store information about containers (this is where port descriptions are stored on containers). These will show up in the advanced section like sysctls and capabilities.","title":"labels"},{"location":"Templates/templates/#devices","text":"Example JSON { \"devices\" : [ { \"host\" : \"/dev/null\" , \"container\" : \"/dev/null\" } ] } YAML devices : - host : /dev/null container : /dev/null Single Line JSON { \"devices\" : [{ \"host\" : \"/dev/null\" , \"container\" : \"/dev/null\" }] } Devices allow devices to be passed through containers for things like transcoding.","title":"devices"},{"location":"Templates/variables/","text":"Template Variables Template variables are variables you can set in Server Settings > Template Variables. The Variables on the left (In the Variable Field) gets replaced by the replacement on the right. Currently this only is for Volumes but that will be expanded to environment variables shortly. Typically you'll want to set these first thing when you start up Yacht so once you add a template you can deploy apps without needing to change anything.","title":"Template Variables"},{"location":"Templates/variables/#template-variables","text":"Template variables are variables you can set in Server Settings > Template Variables. The Variables on the left (In the Variable Field) gets replaced by the replacement on the right. Currently this only is for Volumes but that will be expanded to environment variables shortly. Typically you'll want to set these first thing when you start up Yacht so once you add a template you can deploy apps without needing to change anything.","title":"Template Variables"}]}